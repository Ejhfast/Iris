var _user$project$SearchBars_Commands$execute_decoder = A2(_elm_lang$core$Json_Decode_ops[':='], 'result', _elm_lang$core$Json_Decode$string);
var _user$project$SearchBars_Commands$label_to_value = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'text',
				_1: _elm_lang$core$Json_Encode$string(_p1.text)
			},
				{
				ctor: '_Tuple2',
				_0: 'index',
				_1: _elm_lang$core$Json_Encode$int(_p1.index)
			},
				{
				ctor: '_Tuple2',
				_0: 'label',
				_1: _elm_lang$core$Json_Encode$int(_p1.label)
			}
			]));
};
var _user$project$SearchBars_Commands$execute_url = 'http://localhost:8000/execute';
var _user$project$SearchBars_Commands$post_execute = function (model) {
	var label_encode = _elm_lang$core$Json_Encode$list(
		A2(_elm_lang$core$List$map, _user$project$SearchBars_Commands$label_to_value, model.labels));
	var model_class = function () {
		var _p2 = model.classification;
		if (_p2.ctor === 'Just') {
			return _p2._0.id;
		} else {
			return -1;
		}
	}();
	var ex_data = _evancz$elm_http$Http$multipart(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_evancz$elm_http$Http$stringData,
				'class',
				_elm_lang$core$Basics$toString(model_class)),
				A2(
				_evancz$elm_http$Http$stringData,
				'args',
				A2(_elm_lang$core$Json_Encode$encode, 0, label_encode))
			]));
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$SearchBars_Messages$ExecuteFail,
		_user$project$SearchBars_Messages$ExecuteSucc,
		A3(_evancz$elm_http$Http$post, _user$project$SearchBars_Commands$execute_decoder, _user$project$SearchBars_Commands$execute_url, ex_data));
};
var _user$project$SearchBars_Commands$label_decoder = A4(
	_elm_lang$core$Json_Decode$object3,
	_user$project$SearchBars_Models$Label,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'text', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'index', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'label', _elm_lang$core$Json_Decode$int));
var _user$project$SearchBars_Commands$memberDecoder = A6(
	_elm_lang$core$Json_Decode$object5,
	_user$project$SearchBars_Models$Classification,
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'cmds',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'prob', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'class', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'args', _elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'labels',
		_elm_lang$core$Json_Decode$list(_user$project$SearchBars_Commands$label_decoder)));
var _user$project$SearchBars_Commands$collectionDecoder = _elm_lang$core$Json_Decode$list(_user$project$SearchBars_Commands$memberDecoder);
var _user$project$SearchBars_Commands$classify_url = 'http://localhost:8000/classify';
var _user$project$SearchBars_Commands$post_classify = function (data) {
	var query_data = _evancz$elm_http$Http$multipart(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_evancz$elm_http$Http$stringData, 'query', data)
			]));
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$SearchBars_Messages$ClassifyFail,
		_user$project$SearchBars_Messages$ClassifySucc,
		A3(_evancz$elm_http$Http$post, _user$project$SearchBars_Commands$memberDecoder, _user$project$SearchBars_Commands$classify_url, query_data));
};
